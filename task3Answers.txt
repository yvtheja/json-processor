1.
    Number of Cores: 4
    Physical Memory: 4GB
    Type of disk: Hard Disk
    Operating System: Ubuntu 16.04 LTS
2. Bottle necks
    a. A single thread to read from the file is a inefficient way. As a preprocess, the file can be prettified such that
    the line count for each JSON object is fixed. Now that the line numbers of each JSON object are known, more number
    of threads can be used to read from the file.

    b. QueryResult and BlockingQueue can be lock free.

    c. Parsing JSON strings to JSON objects is another bottleneck. JsonHelper::getJsonObject function is taking 95.17%
    of the parent time. Seperate thread pools can be created for JSON parsing and query computations. This way,
    query computations need not wait for JSON parsing which can improve the performance of the overall script.

    d. The program is CPU-intensive. For testing, only two threads, 1st for reading file and 2nd for processing JSONs
    were created. The 1st thread spent 55sec, only for reading the file and the 2nd thread spent 95sec(only in parsing
    JSON strings and query calculations). The functions that spent longest time are JsonHelper::getJsonObject and readJsonStrings.
